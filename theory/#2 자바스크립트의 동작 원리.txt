
#2.1 데이터 타입의 특징과 종류

특징
Javascript는 다른 프로그래밍 언어에 비해서 데이터 타입이 상대적으로 유연하다(= 상황에 따라 변할 수 있다)


종류

> 기본형 (Primitive Type)
  - Number
  - String
  - Boolean
  - Null
  - Undefined
  - (ES 2015) Symbol : 유일한 값을 만들 때
  - (ES 2020) BigInt : 엄청 큰 숫자를 다룰 때

> 참조형 (Reference Type)
  - Object


#2.5 불린인 듯 불린 아닌 불린같은 값

Javascript에서는 if, for, while문의 조건 부분처럼
불린 타입의 값이 필요한 맥락에서는 불린이 아닌 다른 타입의 값들도
불린 타입으로 형 변환되어 평가되는 특징이 있음


> Falsy 값 (False로 평가되는 값)
  - false
  - null
  - undefined
  - NaN
  - 0
  - ‘’

> Truthy 값 (True로 평가되는 값)
  - 나머지 값들
  - [ ] : 빈 배열
  - { } : 빈 객체


#2.7 AND와 OR의 연산 방식

Javascript에서 논리 연산자는 매번 true 혹은 false를 리턴하는 게 아니라
상황에 따라서 양쪽 값들 중 어느 한쪽을 선택하는 방식으로 동작


AND 연산자
: 양쪽 값이 모두 true인 경우에만 true를 리턴하고, 어느 한쪽이라도 false일 경우, false를 리턴

*Javascript에서 AND 연산자는
: 왼쪽 값이 Truthy하면 오른쪽 값을 리턴하고, 왼쪽값이 Falsy하면 그대로 왼쪽 값을 리턴하는 방식으로 동작


OR 연산자
: 양쪽이 모두 false일 때만 false를 리턴하고, 어느 한쪽이라도 true가 있을 때는 true를 리턴

*Javascript에서 OR 연산자는
: AND 연산자와는 반대로 왼쪽 값이 Truthy하면 그대로 왼쪽 값을 리턴하고, 왼쪽 값이 Falsy하면 오른쪽 값을 리턴하는 방식으로 동작


위와 같은 특성을 조건식처럼 활용

  function print (value) {
    const message = value || 'Codeit';

    console.log (message);
    }

  print();
  print('Javascript');

  /* 코드 해석
  함수를 호출할 때 아무런 값도 전달하지 않으면
  파라미터에 undefined, 그러니까 falsy 값이 전달

  함수를 호출할 때 전달한 값이 없다면 'Codeit'을
  전달한 값이 있을 경우에는 그 값을 사용하게끔 */


#2.8 AND와 OR의 연산 우선순위

*AND 연산자와 OR 연산자를 섞어서 사용할 때는
연산의 우선순위에 따라 AND 연산자의 우선순위가 더 높아 먼저 계산됨


  a || (b * c);
  // `a`를 먼저 평가, `a`가 "truthy"라면 `a` 생성

  a && (b < c);
  // `a`를 먼저 평가, `a`가 "falsy"라면 `a` 생성

  a ?? (b || c);
  // `a`를 먼저 평가, `a`가 `null`과 `undefined`가 아니라면 `a` 생성 

  a?.b.c;
  // `a`를 먼저 평가, `a`가 `null` 또는 `undefined`라면 `undefined` 생성


Optional chaining (`?.`)
: optional chaining 연산자는 체인의 각 참조가 유효한지 명시적으로 검증하지 않고, 연결된 객체 체인 내에 깊숙이 위치한 속성 값을 읽을 수 있음

관련 문서
[https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Optional_chaining](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Optional_chaining)


Nullish coalescing operator (`??`)
: 널 병합 연산자는 왼쪽 피연산자가 `null` 또는 `undefined`일 때
오른쪽 피연산자를 반환하고, 그렇지 않으면 왼쪽 피연산자를 반환하는 논리 연산자

이는 왼쪽 피연산자가 `null` 또는 `undefined` 뿐만 아니라 falsy값에 해당할 경우,
오른쪽 피연산자를 반환하는 논리 연산자 OR (`||`)와는 대조됨

다시 말해 만약 어떤 변수 foo에게 falsy값( `''` 또는 `0`)을 포함한 값을 제공하기 위해
`||`을 사용하는 것을 고려했다면 예기치 않는 동작이 발생할 수 있음

널 병합 연산자는 연산자 우선순위가 다섯 번째로 낮은데, `||`의 바로 아래이며 조건부 (삼항) 연산자의 바로 위

관련 문서
[https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator)


#2.10 null 병합 연산자 ??

Nullish coalescing operator (`??`)
: 널 병합 연산자로 물음표 두 개(??)를 사용해서 null 혹은 undefined 값을 가려내는 연산자

- 연산자 왼쪽의 값이 null 이나 undefined라면 연산자 오른쪽의 값이 리턴
- 연산자 왼쪽의 값이 null 이나 undefined라면 연산자 오른쪽의 값이 리턴

*OR 연산자 (||)와 동작하는 방식이 비슷하지만,
null 병합 연산자(??)는 왼쪽의 값이 null이나 undefined인지 확인하고
OR 연산자(||)는 왼쪽의 값이 falsy인지를 확인하기 때문에


아래 코드와 같이 null이나 undefined가 아닌 falsy 값을 활용할 때 결과가 서로 다름

  const title1 = false || 'codeit';
  const title2 = false ?? 'codeit';

  console.log(title1); // codeit
  console.log(title2); // false

  const width1 = 0 || 150;
  const width2 = 0 ?? 150;

  console.log(width1); // 150
  console.log(width2); // 0

로그인관련 세션 등의 로직에 사용예시
[https://www.codeit.kr/community/threads/35553](https://www.codeit.kr/community/threads/35553)


#2.11 변수와 스코프

let과 const
  1. 변수 이름 중복 선언 불가 (SyntaxError 발생)
  2. 변수 선언 전에 사용 불가 (ReferenceError 발생)
  3. 블록 스코프


변수의 유효범위(= 스코프, Scope)의 차이
  - var x; (함수 스코프, function scope)
  - let y; (블록 스코프, block scope)
  - const z;  (블록 스코프, block scope)

- var : 변수의 스코프가 함수 단위로만 구분
- let, const : 어떤 문법에 해당하는 특별한 키워드 없이 단순히 코드 블록으로만 구분되어 있어도 모두 스코프를 구분