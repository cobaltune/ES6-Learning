
#3.1 함수를 만드는 방법

1. 함수 선언 (function declaration)

  function 함수 이름 (파라미터) {
  동작
  return  // 함수가 호출된 자리에 되돌려 줄 값이 필요할 때
  }


2. 함수 표현식 (function expression)
: 함수 선언을 값처럼 활용하여 변수에 할당하는 방식

  // ex) 1
  const printCodeit = function () {
    console.log('Codeit');
  };

  printCodeit();


  // ex) 2
  const myBtn = document.querySelector('#myBtn');

  myBtn.addEventListener('click', function () {
    console.log('button is clicked!');
  });

+) 변수에 할당하는 것이 포인트가 아니라, 함수 선언을 값처럼 사용하는 방식이라는 점

함수 선언과 함수 표현식의 차이점
함수 선언 방식은 선언하기 전에 호출할 수 있음
ㄴ 선언문이 위로 끌어 올려지는 현상 = 호이스팅 (hoisting)


#3.3 이름이 있는 함수 표현식

Named Function Expression (기명 함수 표현식)
: 함수 표현식으로 함수를 만들 때, 선언하는 함수에 이름을 붙여주는 이름이 있는 함수 표현식 (= 기명 함수 표현식)

함수 표현식으로 함수가 할당된 변수에는 자동으로 name이라는 프로퍼티를 가지게 됨

  const sayHi = function () {
    console.log('Hi');
  };

  console.log(sayHi.name); // sayHi


이름이 없는 함수를 변수에 할당할 때는 변수의 name 프로퍼티는 변수 이름 그 자체를 문자열로 가지게 됨
하지만 함수에 이름을 붙여주게 되면, name 속성은 함수 이름을 문자열로 갖게 됨

  const sayHi = function printHiInConsole() {
    console.log('Hi');
  };

  console.log(sayHi.name); // printHiInConsole


이 함수 이름은 함수 내부에서 함수 자체를 가리킬 때 사용할 수 있고,
함수를 외부에서 함수를 호출할 때 사용할 수는 없음

  const sayHi = function printHiInConsole() {
    console.log('Hi');
  };

  printHiInConsole(); // ReferenceError


기명 함수 표현식은 일반적으로 함수 내부에서 함수 자체를 가리킬 때 사용

  let countdown = function(n) {
    console.log(n);

    if (n === 0) {
      console.log('End!');
    } else {
      countdown(n - 1);
    }
  };

  countdown(5);

argument로 숫자 값을 전달하고, 전달받은 그 값이 0이 될 때까지 하나씩 값을 줄이면서
자기 자신을 호출하는 `countdown`이라는 함수를 함수 표현식으로 작성

이런 식으로 자기 자신을 부르는 함수를 재귀 함수(Recursive function)라고 부름


그런데 만약 이 함수를 복사하려고 다른 변수에 똑같이 담았다가, `countdown` 변수에 담긴 값이 변하게 되면 문제가 발생

  let countdown = function(n) {
    console.log(n);
    if (n === 0) {
      console.log('End!');
    } else {
      countdown(n - 1);
    }
  };

  let myFunction = countdown;

  countdown = null;

  myFunction(5); // TypeError

  /* 코드 해석 
  마지막 줄에서 myFunction 함수를 호출했을 때, 함수가 실행되긴 하지만,
  6번줄 동작을 수행할 때 호출하려는 countdown 함수가
  이미 12번에서 null 값으로 변경되었기 때문에 함수가 아니라는 TypeError가 발생 */


이런 상황을 방지하기 위해서 함수 내부에서 함수 자신을 사용하려고 하면 함수표현식에서는 반드시 기명 함수 표현식을 사용

  let countdown = function printCountdown(n) {
    console.log(n);
    if (n === 0) {
      console.log('End!');
    } else {
      printCountdown(n - 1);
    }
  };

  let myFunction = countdown;

  countdown = null;

  myFunction(5); // 정상적으로 동작


#3.4 즉시 실행 함수 (IIFE)

즉시 실행 함수 (Immediately Invoked Function Expression, IIFE)
: 함수가 선언된 순간에 바로 실행, 함수 선언 부분을 소괄호로 감싼 다음에 바로 뒤에

함수를 실행하는 소괄호를 한 번 더 붙여주는 방식

  (function () {
    console.log('Hi!');
  })();


일반 함수처럼 파라미터를 작성하고, 함수를 호출할 때 argument를 전달할 수도 있음

  (function (x, y) {
    console.log(x + y);
  })(3, 5);


*즉시 실행 함수는 함수에 이름을 지어주더라도 외부에서 재사용할 수 없음

  (function sayHi() {
    console.log('Hi!');
  })();

  sayHi(); // ReferenceError


그래서 일반적으로는 이름이 없는 익명 함수를 사용

  (function countdown(n) {
    console.log(n);
    if (n === 0) {
      console.log('End!');
    } else {
      countdown(n - 1);
    }
  })(5);


+) 다만, 이름이 있는 함수 표현식에서도 살펴봤던 것처럼 함수 내부에서 자기 자신을 호출하는 재귀적인 구조를 만들고자 할 땐
   이름이 필요할 수도 있으니까 이 부분은 참고


즉시 실행 함수의 활용

1. 말 그대로 선언과 동시에 실행이 이뤄지기 때문에 일반적으로 프로그램 **초기화 기능**
에 많이 활용

  (function init() {
    // 프로그램이 실행 될 때 기본적으로 동작할 코드들..
  })();


2. 재사용이 필요 없는, 일회성 동작을 구성할 때 활용

  const firstName = Young;
  const lastName = Kang;

  const greetingMessage = (function () {
    const fullName = `${firstName} ${lastName} `;

    return `Hi! My name is ${fullName}`;
  })();

⇒ 함수의 리턴 값을 바로 변수에 할당하고 싶을 때 활용


#3.5 값으로서 함수

Javascript는 함수를 특별한 종류의 값으로 취급
- type of 연산자로 console.log 하면 function으로 나오지만
- 함수의 구체적인 데이터 타입은 객체, console.dir로 찍어보면 객체 타입의 값으로 평가됨


이런 특징을 활용한 방식

1. 함수 표현식으로 함수를 선언하고 호출할 수 있고
2. 객체 안의 메소드로 사용될 수도 있고
(객체 안에 프로퍼티로 함수를 선언하고, 프로퍼티에 접근해서 함수를 호출)
3. (흔하지는 않지만) 배열에 담아서 함수를 호출도 가능


이뿐만 아니라 값으로 평가되는 이 함수는 다른 함수의 파라미터로도 전달할 수 있음

1. DOM 이벤트를 다룰 때 파라미터를 전달하는 부분에서 함수를 선언하는 것뿐만 아니라

  const myBtn = document.querySelector('#myBtn');

  myBtn.addEventListener('click', function () {
    console.log('button is clicked');
  });


2. 이런 식으로 함수를 호출할 때 미리 선언된 함수를 전달하면서 조건에 따라 그 함수가 나중에 호출되거나 혹은 호출되지 않는 동작을 구현할 수도 있음

  function makeQuiz (quiz, answer, success, fail) {
    if (prompt(quiz) === answer) {
      console.log(succeess());
    } else {
      console.log(fail());
    }
  };

  function getSuccess() {
    return '정답!';
  };

  function getFail() {
    return '오답!';
  };

  const question = '5 + 3 = ?';

  makeQuiz(question, '8', getSuccess, getFail);

⇒ 다른 함수의 파라미터에 전달된 함수를 콜백 함수(Callback Function)라고 부름 (여기서는 getSuccess, getFail)


+) 함수가 하나의 값으로 취급되는 특성은 어떤 함수의 리턴 값이 함수가 될 수 있다는 뜻

  function getPrintHi() {
    return function () {
      console.log ('Hi?');
    };
  };

  const sayHi = getPrintHi();

  sayHi();

  /* 코드 해석
  getPrintHi 라는 함수가 또다시 함수를 리턴하는 모습 그러면 8번 줄에서는
  getPrintHi를 호출했을 때, 리턴 값이 되는 함수가 sayHi라는 변수에 할당됨
  그래서 sayHi()를 호출하면 콘솔에는 'Hi?'가 출력 */

⇒ getPrintHi와 같이 함수를 리턴하는 함수를 고차 함수(Higher Order Function)라고 부름
  : 고차 함수는 변수에 호출된 값을 할당해서 활용하기도 하지만,
    특별한 경우에는 이렇게 이중 괄호를 사용해서 고차 함수로 리턴되는 함수를 바로 호출할 수도 있음

    function getPrintHi() {
      return function () {
        console.log ('Hi?');
      };
    };

    getPrintHi()();


∴ Javascript에서 함수는 변수나 다른 데이터 구조 안에 할당될 수 있고, 다른 함수의 파라미터로 전달될 수도 있고, 다른 함수의 리턴 값이 될 수도 있음


+) 참고로 프로그래밍에서 이런 특징을 가진 함수를 일급 함수(First Class Function)이라고 함
   그래서 JS는 일급 함수를 가진 프로그래밍언어라고 할 수 있음


#3.7 Parameter

argument가 파라미터로 전달될 때는 파라미터의 기본값과는 전혀 관계없이
함수를 호출할 때 작성한 순서 그대로 전달되기 때문에 argument를 생략할 가능성이 있어서
기본값이 필요한 파라미터는 가급적 오른 편에 작성하는 것이 좀 더 권장된다는 점 유의

  function greeting (name = 'Codeit', interest) {
    cosole.log(`Hi My name is ${name}!`);
    cosole.log(`I like ${interest}!`);
  }

  greeting('Javascript');


+) name 파라미터의 기본값을 사용하고 싶다면

  function greeting (name = 'Codeit', interest = 'Javascript') {
    cosole.log(`Hi My name is ${name}!`);
    cosole.log(`I like ${interest}!`);
  }

  greeting(undefined, 'Python');

⇒ 파라미터의 기본값은 argument를 생략하는 것뿐만 아니라 argument가 undefined값으로 전달될 때도 동작함


+) 파라미터의 기본값은 앞쪽에 정의된 파라미터를 활용할 수도 있음

  function defaultTest (x, y = x + 3) {
    console.log(`x: ${x}`);
    console.log(`y: ${y}`);
  };

  defaultTest(2);

  /* 코드 해석
  dafaultTest 함수에는 x와 y, 두 개의 파라미터가 있지만
  함수를 호출할 때는 augument를 하나 생략해서 숫자 2가 파라미터 x에 전달되고
  파라미터 y는 기본값을 사용하여 2를 가진 x가 y의 기본값에 활용 */


#3.9 Arguments

javascript에서 함수를 선언할 때 함수 내부에서는 arguments라는 특별한 객체를 사용할 수 있음

이를 콘솔에 찍어보면 파라미터와 관계없이
함수를 호출할 때 전달한 argument들이 대괄호 안에 각 요소로 담겨있음

⇒ arguments 객체는 배열과 비슷한 모양을 하고 있긴 하지만 모양만 비슷하고, 배열의 메소드는 사용할 수 없는 유사 배열


+) 그래도 lenght 프로퍼티로 argument 개수를 확인할 수도 있고,
   인덱싱을 통해서 argument 하나하나에 접근을 한다거나
   혹은 for … of문을 통해서 반복작업도 할 수 있기 때문에

arguments 객체를 활용하면 호출할 때 전달되는 argument에 따라 유연하게 동작하는 함수를 만들어 낼 수 있음

  function printArguments(a, b, c) {
    for (const arg of arguments) {
      console.log (arg);
    }

*arguments라는 객체가 함수 내부에 특정한 기능으로 존재하기 때문에
 동일한 이름의 파라미터 작명을 피하고, 함수 내부에서 동일한 이름의 변수나 함수를 만드는 것도 피해야 함


#3.11 Rest Parameter

arguments 객체에 아쉬운 부분
- arguments 객체가 유사 배열이기 때문에 배열의 메소드를 사용할 수 없다는 점
- 항상 함수를 호출할 때 전달한 이 argument 전체를 다루기 때문에 마지막 두 개나, 세 개만 따로 묶어서 다루려면 인덱싱을 통해서 한 번 더 세분화해야 하는 과정이 필요


이를 보완하고자 레스트 파라미터 (rest parameter)라는 문법 등장

  function printArguments(...arg) {
    for (const arg of args) {
      console.log (arg);
    }

파라미터 하나를 만들어서 그 앞에 (…)를 붙여주고, arguments 객체 대신 이 파라미터를 사용


- rest parameter는 배열이기 때문에 배열의 메소드를 자유롭게 사용할 수 있음
- 일반 파라미터와 함께 사용할 수도 있음
⇒ 앞에 정의된 파라미터에 argument를 먼저 할당하고 나머지 argument를 배열로 묶는 역할을 하기 때문에
   일반 파라미터와 함께 사용할 때는 반드시 가장 마지막에 작성해야 함

    function printRank (first, second, ...others) {
      console.log ('코드잇 레이스 최종 결과');
      console.log (`우승: ${first}`);
      console.log (`준우승: ${second}`);
      
      for (const arg of others) {
        console.log (`참가자: ${arg}`);
      }
    }

    printRank ('a', 'b', ...);

∴ 이 rest parameter가 가지는 장점이 상대적으로 더 크기 때문에
  코드를 작성할 때 가급적이면 rest parameter를 우선적으로 활용하고,
  불가피한 상황에서 arguments 객체를 활용하는 게 많은 스타일가이드에서 권장하는 방법


#3.13 Arrow Function

Arrow Function
: 기존의 함수 선언 방식을 보다 간결하게 만들어 주는 문법으로,
  이름이 없는 익명 함수이기 때문에 일반적으로 어떤 이름을 가진 변수에 할당하거나
  혹은 다른 함수의 argument를 선언할 때 주로 활용됨

  // before 1)
  const getTwice = function(number) {
    return number * 2;
  };

  console.log(getTwice(5));

  const myBtn = document.querySelector('#myBtn');

  myBtn.addEventListener('click', function () {
    console.log('button is clicked!');
  });


  // after 1)
  const getTwice = (number) => {
    return number * 2;
  };

  console.log(getTwice(5));

  const myBtn = document.querySelector('#myBtn');

  myBtn.addEventListener('click', () => {
    console.log('button is clicked!');
  });



  // before 2)
  const getTwice = function(number) {
    return number * 2;
  };

  function getTwice (number){
    return number * 2;
  };


  // after 2)
  const getTwice = number => number * 2;

  console.log(getTwice(6));


모든 Arrow function들이 이렇게 간결하게 작성될 수는 없고, 특정한 상황에서 좀 더 간결하게 표현한 규칙들이 있음

  // Arrow function의 일반적인 모양
  const getTwice = (number) => {
    return number * 2;
  };

  console.log(getTwice(3));


파라미터가 하나인 Arrow function은 파라미터를 감싸는 소괄호 부분을 생략할 수 있음

  const getTwice = number => {
    return number * 2;
  };

  console.log(getTwice(3));

*몇몇 스타일 가이드에서는 가독성의 문제로 파라미터가 하나라도 소괄호를 생략하지 말고 이 부분이 파라미터라는 것을 명확하게 알려주는 것이 좋다는 의견도 있음


+) 파라미터가 두 개 이상 있거나, 없을 경우에는 소괄호를 반드시 작성해야 함

  const sum = (a, b) => {
    return a + b;
  };

  const getCodeit = () => {
    return { name: 'Codeit', };
  };

  console.log(sum(10, 5));
  console.log(getCodeit());


내부의 동작 부분이 return문 하나로만 이루어져 있다면 중괄호와 함께 return 키워드도 생략할 수 있음

  const getTwice = number => number * 2;

  console.log(getTwice(3));


but 함수 내부에서 조건문이나, 반복문 아니면 이렇게 변수의 값을 할당하는 것과 같이
return문 외에 다른 표현들이 더 필요하다면 중괄호와 return 키워드는 생략할 수 없으니까 주의해야 함

  const sum = (a, b) => {
    const result = a + b;
    return result;
  };

  const getCodeit = () => {
    return { name: 'Codeit', };
  };

  console.log(sum(10, 5));
  console.log(getCodeit());


+) 함수 내부에 동작이 이렇게 return문 하나밖에 없긴 하지만 retun값이 객체인 경우, 중괄호와 return 키워드를 생략하게 되면 에러가 발생함
   : 객체라고 작성했던 중괄호를 함수의 동작 부분을 구분하는 중괄호로 해석하기 때문
  
  // error
  const sum = (a, b) => {
    const result = a + b;
    return result;
  };

  const getCodeit = () => { name: 'Codeit', };
  };

  console.log(sum(10, 5));
  console.log(getCodeit());


  // solution
  const sum = (a, b) => {
    const result = a + b;
    return result;
  };

  const getCodeit = () => ({ name: 'Codeit', });
  };

  console.log(sum(10, 5));
  console.log(getCodeit());


우리가 기존에 function 키워드로 사용하던 대부분의 함수는 Arrow function을 통해 좀 더 간결한 코드로 대체 가능하지만,
Arrow function에는 arguments 객체가 없다는 점을 주의

  function nomalFunc () {
    console.log(arguments);
  };

  const arrowFunc = () => {
    console.log(arguments);
  };

  nomalFunc(1, 2, 3);
  arrowFunc(1, 2, 3);

  // 출력값
  Arguments(3) [1, 2 ,3]
  ReferenceError: arguments is not defined

⇒ 만약 arguments 객체를 사용하는 함수라면 Arrow function으로 대체하기는 어렵다는 점 참고


#3.15 What is this?

this
- 콘솔에 this를 출력해 보면 window 객체가 출력됨 (= 브라우저 안에서 javascript가 동작한다면 전역 객체인 window 객체가 this의 기본값)
- 일반적으로 사용되지 않고, 주로 함수 내부에서 사용
특히 객체의 메소드를 만들 때 중요한 역할을 함

  const user = {
    firstName: 'Tess',
    lastName: 'Jang',
    getFullName: function() {
      return `${user.firstName} ${user.lastName}`;
    },
  };

  console.log(user.getFullName());

  /* 코드 해석
  user 객체에 firstName과 lastName 프로퍼티를 만들고
  getFullName 메소드에서는 이 user 객체의 각 프로퍼티를 합쳐서
  새로운 문자열을 return */


+) 이 메소드를 다른 객체에도 적용하고 싶을 때

  function getFullName() {
    return `${user.firstName} ${user.lastName}`;
  }

  const user = {
    firstName: 'Tess',
    lastName: 'Jang',
    getFullName: getFullName,
  };

  const admin = {
    firstName: 'Alex',
    lastName: 'Kim',
    getFullName: getFullName,
  };

  console.log(user.getFullName());
  console.log(admin.getFullName());

  // 출력값
  Tess Jang
  Tess Jang


이렇게 함수 외부로 분리하게 되면 문제가 발생함
: getFullName의 동작 부분에서는 계속해서 user객체만 바라보기 때문에 admin객체에서 getFullName 메소드를 호출하더라도 결과적으로는 user객체의 프로퍼티를 사용하게 되는 것과 같기 때문

⇒ 이런 상황에서 this라는 키워드를 활용

  function getFullName() {
    return `${this.firstName} ${this.lastName}`;
  }

  const user = {
    firstName: 'Tess',
    lastName: 'Jang',
    getFullName: getFullName,
  };

  const admin = {
    firstName: 'Alex',
    lastName: 'Kim',
    getFullName: getFullName,
  };

  console.log(user.getFullName());
  console.log(admin.getFullName());

  // 출력값
  Tess Jang
  Alex Kim

: javascript에서 this는 함수를 호출한 객체를 가리키는 키워드라는 점,
  그래서 코드를 작성할 때 값이 미리 결정되는 게 아니라
  함수가 호출될 때 어떤 객체가 그 함수를 호출했는지에 따라 상대적으로 값이 변하게 된다는 특징을 가짐


*일반 함수와 Arrow Function의 가장 중요한 차이
: this를 다루는 방식이 서로 다름

  console.log(this);

  // Arrow Function
  const printThis = () => {
    console.log(this);
  };

  const myObj = {
    content: 'myObj',
    printThis: printThis,
  };

  const otherObj = {
    content: 'otherObj',
    printThis: printThis,
  };

  myObj.printThis();
  otherObj.printThis();

  // 출력값
  window {...}
  window {...}
  window {...}

: Arrow Function에서 this값은 일반 함수처럼 호출한 대상에 따라 상대적으로 변하는 게 아니라,
  Arrow Function이 선언되기 직전에 그 때 유효한 this값과 똑같은 값을 가지고 동작 (이 코드에서는 Arrow Function이 선언되기 직전의 this는 window객체)

⇒ 이러한 특징때문에 특별히 객체에 메소드를 만들 때는 Arrow Function보다는 일반 함수를 좀 더 권장된다는 점 참고


∴ 외부에서 여러 객체에 공통적으로 사용되는 메소드를 만들 때뿐만 아니라(위 코드),
  그냥 객체 내부에서 메소드를 만들 때도 메소드가 속해있는 객체의 프로퍼티가 필요한 상황에서도 충분히 활용 가능

  const user = {
    firstName: 'Tess',
    lastName: 'Jang',
    getFullName: function () {
      return `${this.firstName} ${this.lastName}`;
    },
  };

  console.log(user.getFullName());