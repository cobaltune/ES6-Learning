
#4.2 조건을 다루는 표현식

조건 연산자 (Conditional operator) = 삼항연산자 (Ternary oprator)
: 조건 연산자는 연산 기호가 총 두 개가 활용 = 연산되는 값이 총 세 개이기 때문에 삼항 연산자라고도 불림 (javascript에서 유일하게 항이 세 개인 연산자)

ES2015 이전, 문장 형태의 코드 블록

  // javascript에서 조건을 다루는 방법 1)
  if (조건) {
    // 조건이 true일 때 동작
  } else {
    // 조건이 false일 때 동작
  }


  // javascript에서 조건을 다루는 방법 1)
  switch (값) {
    case A:
      // 값이 A와 일치할 때 동작
      break;
    default:
      // 값과 일치하는 case가 없을 때 동작
  }


ES2015 이후, 좀 더 간결해진 표현식으로 조건 다루기

  // 조건 ? truthy 할 때 표현식 : flasy 할 때 표현식

  // 시험의 결과를 알려주는 코드
  const CUT_OFF = 80;

  function passChecker (score) {
    return score > CUT_OFF ? '합격' : '불합격';
  }

  console.log (passChecker(75));


  // 똑같이 동작하는 함수를 if문으로 작성해 봤을 때
  const CUT_OFF = 80;

  function passChecker (score) {
    if(score > CUT_OFF) {
      return '합격';
    } else {
      return '불합격';
    }
  }

  console.log (passChecker(75));


- 가장 왼쪽에 조건을 두고
- 이 조건이 truthy할 때 가지게 되는 표현식을 ? 다음에
- 그리고 이 조건이 falsy할 때 가지게 될 표현식을 : 다음에 작성

⇒ 조건 연산자는 동작하는 방식이 if문과 굉장히 비슷함
   (if문의 소관호 안에 조건 부분, 코드 블록 안의 동작 부분, 마지막은 else문)


*간결하게 유연한 것처럼 보이긴 하지만
조건 연산자는 표현식이기 때문에 조건에 따라 변수를 선언한다거나, 조건에 따라 반복문을 실행할 수는 없음

(= 조건 연산자가 모든 if문을 대체할 수는 없음)


#4.4 Spread 구문

Spread 구문(Spread Syntax)
: '펼치다'라는 spread의 의미처럼 여러 개의 값을 하나로 묶은 배열을 다시 각각의 개별 값으로 펼치는 문법으로, 배열 앞에 마침표 세 개(…)를 붙여 작성


(ES2015에 새롭게 등장한 문법으로, 특히 배열을 다룰 때 유용하게 활용됨)

  const numbers = [1, 2 ,3];

  console.log(...numbers);

*언뜻 보면 Rest parameter와 비슷해보이지만
  Rest parameter는 여러 개의 argument를 하나의 파라미터로 묶는 방식이고,
  Spread 구문은 하나로 묶여 있는 값을 각각의 개별 값으로 펼치는 방식이라는 점 구분


+) 배열을 좀 더 편리하게 복사할 수 있음

  const webPublishing = ['HTML', 'CSS'];
  const interactiveWeb = webPublishing;

  interactiveWeb.push ('Javascript');

  console.log(webPublishing);
  console.log(interactiveWeb);

  // 출력값
  (3) ["HTML", "CSS", "Javscript"]
  (3) ["HTML", "CSS", "Javscript"]

  /* 코드 해석
  interactiveWeb이 webPublishing을 참조하기 때문에
  interactiveWeb에서 'Javascript'를 push하더라도
  webPublishing에도 push가 됨 */

: 객체 타입의 값들은 변수에 값이 직접 할당되는 게 아니라 주솟값이 참조된다는 사실


그래서 이런 경우는 slice 메소드를 활용해서 배열을 복사

  const webPublishing = ['HTML', 'CSS'];
  const interactiveWeb = webPublishing.slice();

  interactiveWeb.push ('Javascript');

  console.log(webPublishing);
  console.log(interactiveWeb);

  // 출력값
  (2) ["HTML", "CSS"]
  (3) ["HTML", "CSS", "Javscript"]


위 코드를 spread 구문으로 작성

  // spread 구문 1)
  const webPublishing = ['HTML', 'CSS'];
  const interactiveWeb = [...webPublishing];

  interactiveWeb.push ('Javascript');

  console.log(webPublishing);
  console.log(interactiveWeb);

  // 출력값
  (2) ["HTML", "CSS"]
  (3) ["HTML", "CSS", "Javscript"]


바로 요소를 추가할 수도 있음

  // spread 구문 2)
  const webPublishing = ['HTML', 'CSS'];
  const interactiveWeb = [...webPublishing, 'Javascript'];

  console.log(webPublishing);
  console.log(interactiveWeb);

  // 출력값
  (2) ["HTML", "CSS"]
  (3) ["HTML", "CSS", "Javscript"]


여러 배열을 합칠 때도 각 배열을 Spread구문으로 펼쳐서 두 배열이 합쳐진 새로운 배열을 간단하게 만들어 낼 수도 있음

  const arr1 = [1, 2, 3];
  const arr2 = [4, 5, 6];

  const arr3 = [...arr1, ...arr2];
  console.log(arr3);

⇒ 변수에 담길 배열의 모습을 좀 더 직관적으로 보여주는 장점이 있음


물론 spread구문 없이 concat 메소드로 활용할 수도 있음

  const arr1 = [1, 2, 3];
  const arr2 = [4, 5, 6];

  const arr3 = [...arr1, ...arr2];
  console.log(arr3);

  const arr4 = arr1.concat(arr2);
  console.log(arr4);


⇒ 이뿐만 아니라 함수를 호출할 때 argument로 활용할 수 있음

  const introduce = (name, birth, job) => {
    console.log('안녕하세요! 반갑습니다.');
    console.log(`저는 ${name}입니다.`);
    console.log(`${birth}년 생이고,`);
    console.log(`직업은 ${job}입니다.`);
    console.log('잘 부탁드립니다 :)');
  };

  const myArr = ['코드잇', 2017, '프로그래밍 강사'];
  introduce(...myArr);

: 여러 개의 파라미터가 있는 함수를 호출할 때, 배열을 펼쳐서 이런 식으로 각각의 argument로 사용할 수 있다는 점도 참고


*spread구문 자체가 값이라고 오해할 수도 있지만
이 상황에서는 여러 개 값이 각각 매칭되는 상황이기 때문에 가능했던 것일 뿐

⇒ spread구문은 하나로 묶인 값을 여러 개의 값으로 펼친 개념이기 때문에
   하나의 값으로 평가되는 게 아니라 여러 값의 목록으로 평가됨


만약 배열을 펼쳐서 객체에 담으면

  const members = ['태호', '종훈' '우재'];

  const newObject = { ...members };

  console.log(newObject);

  // 출력값
  {0:"태호", 1:"종훈", 2:"우재"}


  /* 코드 해석
  spread 구문으로 배열을 펼친 다음에
  중괄호로 감싸서 객체로 만들게 되면
  0번부터 시작하는 배열의 인덱스가 프로퍼티 네임이 되어서
  객체가 만들어짐 */


#4.7 모던한 프로퍼티 표기법

객체의 프로퍼티를 좀 더 간결하게 표현하는 방식

  // 기존 프로퍼티 표기법
  const user = {
    title: 'Codeit',
    birth: 2017,
    job: '프로그래밍 강사',
  );


  // ES2015에 새로 추가된 표기법
  const title = 'Codeit';
  const burth = 2017;
  const job = '프로그래밍 강사';

  const user = {
    title: title,
    birth: birth,
    job: job,
  };

⇒ 변수에 할당된 값을 활용해서 프로퍼티를 만들 수도 있음


이때, 활용할 변수의 이름과 프로퍼티 네임이 똑같다면

  const title = 'Codeit';
  const burth = 2017;
  const job = '프로그래밍 강사';

  const user = {
    title,
    birth,
    job,
  };

⇒ 이렇게 하나만 작성하는 표현도 가능

  +) 변수뿐만 아니라 함수를 메소드로 만들 때도 이렇게 축약형 표기가 가능


∴ 프로퍼티 네임과 value로 사용할 변수나 함수의 이름이 같다면 위와 같이 중복해서 작성하지 않고 하나만 작성해 줄 수 있음


외부에 있는 함수를 메소드로 만들 때 말고, 객체 내부에서 메소드를 선언할 때도 활용할 수 있는 표현

  // 이전 강의 getFullName 코드 재활용

  // before
  const user = {
    firstName: 'Tess',
    lastName: 'Jang',
    getFullName: function () {
      return `${this.firstName} ${this.lastName}`;
    },
  };

  console.log(user.getFullName());


  // after
  const user = {
    firstName: 'Tess',
    lastName: 'Jang',
    getFullName () {
      return `${this.firstName} ${this.lastName}`;
    },
  };

  console.log(user.getFullName());


프로퍼티 네임을 표현식으로 나타내는 방법
= 계산된 속성명(computed property name)

  const user = {
    [표현식]: 값;
  };


+) 이렇게 표현식을 대괄호로 감싸주게 되면 표현식의 값을 프로퍼티 네임으로 쓸 수 있음

  const propertyName = 'birth';
  const getJob = () => 'job';

  const codeit = {
    ['topic' + 'Name']: 'Modern Javascript',
    [propertyName]: 2017,
    [getJob()]: '프로그래밍 강사',
  };

  console.log(codeit);

위와 같이 변수에 담긴 값을 사용하거나, 함수의 리턴값을 사용할 수도 있음


#4.9 옵셔널 체이닝

옵셔널 체이닝 연산자 (?.)

: 만약 옵셔널 체이닝 연산자 왼편의 프로퍼티 값이 `undefined` 또는 `null`이 아니라면
  그다음 프로퍼티 값을 리턴하고, 그렇지 않은 경우에는 undefined를 반환하는 문법

  function printCatName(user) {
    console.log(user.cat?.name);
  }


  // 삼항 연산자를 통해 구체적으로 표현하자면
  function printCatName(user) {
    console.log((user.cat === null || user.cat === undefined) ? undefined : user.cat.name);
  }

  // null 병합 연산자와 함께 활용하면
  function printCatName(user) {
    console.log(user.cat?.name ?? '함께 지내는 고양이가 없습니다.');
  }

  const user2 = {
    name: 'Young',
  }

  printCatName(user2); // 함께 지내는 고양이가 없습니다.


#4.10 Destructuring (구조 분해)

Destructuring (구조 분해)
: ES2015에 등장한 문법으로, 배열이나 객체의 구조를 분해하는 문법

- 배열 : 인덱스로 여러 값에 순서가 있는 배열
- 객체 : 프로퍼티 네임으로 여러 값에 이름이 붙는 객체

의 구조가 서로 다르기 때문에 이 Destructuring 문법도
배열과 객체에 각각 적용되는 방식에 차이가 있음


>>배열

  // 멤버들끼리 어떤 게임을 해서 등수가 가려진 rank라는 배열
  // 그러고 나서 이 순위에 따라서 상품을 나눠주려고

  const rank = ['효준', '유나', '민환', '재하'];

  const macbook = rank[0];
  const ipad = rank[1];
  const airpods = rank[2];
  const coupon = rank[3];

  console.log(macbook);
  console.log(ipad);
  console.log(airpods);
  console.log(coupon);

+) 처음부터 상품 이름에 멤버들 이름을 바로 할당할 수도 있지만,

   이렇게 인덱스를 활용하면 도중에 순위가 변동되어 배열 안의 요소들의 순서가 변경되었을 때
   자연스레 배열의 순서에 따라 할당


  // Destructuring 문법으로 다시 작성
  const rank = ['효준', '유나', '민환', '재하'];

  const [macbook, ipad, airpods, coupon] = rank;

  console.log(macbook);
  console.log(ipad);
  console.log(airpods);
  console.log(coupon);

⇒ rank 배열 자체를 할당하면, 배열의 형태를 한 변수 이름들에 요소들이 순서대로 할당되는 원리
   = 배열을 분해해서 하나씩 할당하는 원리


*할당되는 값이 배열의 형식이 아니거나 혹은 아무것도 할당하지 않으면 오류 발생

+) 배열을 가지고 구조 분해를 할 때, 꼭 선언된 변수의 개수와 배열의 길이가 같을 필요는 없음
   = 길이가 넘치는 요소는 어느 변수에도 할당되지 않음


가장 마지막 변수에 마침표 세 개(...)를 붙여주면

  const rank = ['효준', '유나', '민환', '재하'];

  const [macbook, ipad, airpods, ...coupon] = rank;

  console.log(macbook);
  console.log(ipad);
  console.log(airpods);
  console.log(coupon);

  // 출력값
  유나
  효준
  민환
  (2) ["재하", "규식"]

⇒ 함수의 Rest parameter처럼 배열을 분해해서 할당할 때,
   앞쪽에 있는 변수의 순서대로 요소를 할당하고 남은 나머지 요소를 마지막 변수의 배열로 할당하는 게 가능


*하지만 Rest parameter와 마찬가지로 나머지 요소를 가져오기 때문에 항상 마지막 변수에만 활용할 수 있음

+) 할당하는 배열의 길이가 선언된 변수의 개수보다 적으면, 남은 변수에는 선언이 안되거나 오류가 나는 것이 아니라 undefined값이 할당됨


여기서도 함수의 파라미터와 비슷하게 기본값을 작성할 수 있음

  const rank = ['효준', '유나', '민환'];

  const [macbook, ipad, airpods, coupon = '없음'] = rank;

  console.log(macbook);
  console.log(ipad);
  console.log(airpods);
  console.log(coupon);

  // 출력값
  유나
  효준
  민환
  없음

⇒ 이 변수에 undefined값이 할당되려고 할 때, undefined 대신 기본값이 할당됨


배열의 Destructuring 문법은 변수에 할당된 값을 서로 교환할 때도 활용할 수 있음

  let macbook = '효준';
  let ipad = '유나';

  console.log('MacBook 당첨자:', macbook);
  consolg.log('ipad 당첨자:', ipad);


  // Destructuring 문법이 등장하기 전까지는 이렇게 작성됨
  let temp = macbook;
  macbook = ipad;
  ipad = temp;

  console.log('MacBook 당첨자:', macbook);
  consolg.log('ipad 당첨자:', ipad);


  // Destructuring 문법 등장
  [macbook, ipad] = [ipad, macbook];