
#4.2 조건을 다루는 표현식

조건 연산자 (Conditional operator) = 삼항연산자 (Ternary oprator)
: 조건 연산자는 연산 기호가 총 두 개가 활용 = 연산되는 값이 총 세 개이기 때문에 삼항 연산자라고도 불림 (javascript에서 유일하게 항이 세 개인 연산자)

ES2015 이전, 문장 형태의 코드 블록

  // javascript에서 조건을 다루는 방법 1)
  if (조건) {
    // 조건이 true일 때 동작
  } else {
    // 조건이 false일 때 동작
  }


  // javascript에서 조건을 다루는 방법 1)
  switch (값) {
    case A:
      // 값이 A와 일치할 때 동작
      break;
    default:
      // 값과 일치하는 case가 없을 때 동작
  }


ES2015 이후, 좀 더 간결해진 표현식으로 조건 다루기

  // 조건 ? truthy 할 때 표현식 : flasy 할 때 표현식

  // 시험의 결과를 알려주는 코드
  const CUT_OFF = 80;

  function passChecker (score) {
    return score > CUT_OFF ? '합격' : '불합격';
  }

  console.log (passChecker(75));


  // 똑같이 동작하는 함수를 if문으로 작성해 봤을 때
  const CUT_OFF = 80;

  function passChecker (score) {
    if(score > CUT_OFF) {
      return '합격';
    } else {
      return '불합격';
    }
  }

  console.log (passChecker(75));


- 가장 왼쪽에 조건을 두고
- 이 조건이 truthy할 때 가지게 되는 표현식을 ? 다음에
- 그리고 이 조건이 falsy할 때 가지게 될 표현식을 : 다음에 작성

⇒ 조건 연산자는 동작하는 방식이 if문과 굉장히 비슷함
   (if문의 소관호 안에 조건 부분, 코드 블록 안의 동작 부분, 마지막은 else문)


*간결하게 유연한 것처럼 보이긴 하지만
조건 연산자는 표현식이기 때문에 조건에 따라 변수를 선언한다거나, 조건에 따라 반복문을 실행할 수는 없음

(= 조건 연산자가 모든 if문을 대체할 수는 없음)


#4.4 Spread 구문

Spread 구문(Spread Syntax)
: '펼치다'라는 spread의 의미처럼 여러 개의 값을 하나로 묶은 배열을 다시 각각의 개별 값으로 펼치는 문법으로, 배열 앞에 마침표 세 개(…)를 붙여 작성


(ES2015에 새롭게 등장한 문법으로, 특히 배열을 다룰 때 유용하게 활용됨)

  const numbers = [1, 2 ,3];

  console.log(...numbers);

*언뜻 보면 Rest parameter와 비슷해보이지만
  Rest parameter는 여러 개의 argument를 하나의 파라미터로 묶는 방식이고,
  Spread 구문은 하나로 묶여 있는 값을 각각의 개별 값으로 펼치는 방식이라는 점 구분


+) 배열을 좀 더 편리하게 복사할 수 있음

  const webPublishing = ['HTML', 'CSS'];
  const interactiveWeb = webPublishing;

  interactiveWeb.push ('Javascript');

  console.log(webPublishing);
  console.log(interactiveWeb);

  // 출력값
  (3) ["HTML", "CSS", "Javscript"]
  (3) ["HTML", "CSS", "Javscript"]

  /* 코드 해석
  interactiveWeb이 webPublishing을 참조하기 때문에
  interactiveWeb에서 'Javascript'를 push하더라도
  webPublishing에도 push가 됨 */

: 객체 타입의 값들은 변수에 값이 직접 할당되는 게 아니라 주솟값이 참조된다는 사실


그래서 이런 경우는 slice 메소드를 활용해서 배열을 복사

  const webPublishing = ['HTML', 'CSS'];
  const interactiveWeb = webPublishing.slice();

  interactiveWeb.push ('Javascript');

  console.log(webPublishing);
  console.log(interactiveWeb);

  // 출력값
  (2) ["HTML", "CSS"]
  (3) ["HTML", "CSS", "Javscript"]


위 코드를 spread 구문으로 작성

  // spread 구문 1)
  const webPublishing = ['HTML', 'CSS'];
  const interactiveWeb = [...webPublishing];

  interactiveWeb.push ('Javascript');

  console.log(webPublishing);
  console.log(interactiveWeb);

  // 출력값
  (2) ["HTML", "CSS"]
  (3) ["HTML", "CSS", "Javscript"]


바로 요소를 추가할 수도 있음

  // spread 구문 2)
  const webPublishing = ['HTML', 'CSS'];
  const interactiveWeb = [...webPublishing, 'Javascript'];

  console.log(webPublishing);
  console.log(interactiveWeb);

  // 출력값
  (2) ["HTML", "CSS"]
  (3) ["HTML", "CSS", "Javscript"]


여러 배열을 합칠 때도 각 배열을 Spread구문으로 펼쳐서 두 배열이 합쳐진 새로운 배열을 간단하게 만들어 낼 수도 있음

  const arr1 = [1, 2, 3];
  const arr2 = [4, 5, 6];

  const arr3 = [...arr1, ...arr2];
  console.log(arr3);

⇒ 변수에 담길 배열의 모습을 좀 더 직관적으로 보여주는 장점이 있음


물론 spread구문 없이 concat 메소드로 활용할 수도 있음

  const arr1 = [1, 2, 3];
  const arr2 = [4, 5, 6];

  const arr3 = [...arr1, ...arr2];
  console.log(arr3);

  const arr4 = arr1.concat(arr2);
  console.log(arr4);


⇒ 이뿐만 아니라 함수를 호출할 때 argument로 활용할 수 있음

  const introduce = (name, birth, job) => {
    console.log('안녕하세요! 반갑습니다.');
    console.log(`저는 ${name}입니다.`);
    console.log(`${birth}년 생이고,`);
    console.log(`직업은 ${job}입니다.`);
    console.log('잘 부탁드립니다 :)');
  };

  const myArr = ['코드잇', 2017, '프로그래밍 강사'];
  introduce(...myArr);

: 여러 개의 파라미터가 있는 함수를 호출할 때, 배열을 펼쳐서 이런 식으로 각각의 argument로 사용할 수 있다는 점도 참고


*spread구문 자체가 값이라고 오해할 수도 있지만
이 상황에서는 여러 개 값이 각각 매칭되는 상황이기 때문에 가능했던 것일 뿐

⇒ spread구문은 하나로 묶인 값을 여러 개의 값으로 펼친 개념이기 때문에
   하나의 값으로 평가되는 게 아니라 여러 값의 목록으로 평가됨


만약 배열을 펼쳐서 객체에 담으면

  const members = ['태호', '종훈' '우재'];

  const newObject = { ...members };

  console.log(newObject);

  // 출력값
  {0:"태호", 1:"종훈", 2:"우재"}


  /* 코드 해석
  spread 구문으로 배열을 펼친 다음에
  중괄호로 감싸서 객체로 만들게 되면
  0번부터 시작하는 배열의 인덱스가 프로퍼티 네임이 되어서
  객체가 만들어짐 */


#4.7 모던한 프로퍼티 표기법

객체의 프로퍼티를 좀 더 간결하게 표현하는 방식

  // 기존 프로퍼티 표기법
  const user = {
    title: 'Codeit',
    birth: 2017,
    job: '프로그래밍 강사',
  );


  // ES2015에 새로 추가된 표기법
  const title = 'Codeit';
  const burth = 2017;
  const job = '프로그래밍 강사';

  const user = {
    title: title,
    birth: birth,
    job: job,
  };

⇒ 변수에 할당된 값을 활용해서 프로퍼티를 만들 수도 있음


이때, 활용할 변수의 이름과 프로퍼티 네임이 똑같다면

  const title = 'Codeit';
  const burth = 2017;
  const job = '프로그래밍 강사';

  const user = {
    title,
    birth,
    job,
  };

⇒ 이렇게 하나만 작성하는 표현도 가능

  +) 변수뿐만 아니라 함수를 메소드로 만들 때도 이렇게 축약형 표기가 가능


∴ 프로퍼티 네임과 value로 사용할 변수나 함수의 이름이 같다면 위와 같이 중복해서 작성하지 않고 하나만 작성해 줄 수 있음


외부에 있는 함수를 메소드로 만들 때 말고, 객체 내부에서 메소드를 선언할 때도 활용할 수 있는 표현

  // 이전 강의 getFullName 코드 재활용

  // before
  const user = {
    firstName: 'Tess',
    lastName: 'Jang',
    getFullName: function () {
      return `${this.firstName} ${this.lastName}`;
    },
  };

  console.log(user.getFullName());


  // after
  const user = {
    firstName: 'Tess',
    lastName: 'Jang',
    getFullName () {
      return `${this.firstName} ${this.lastName}`;
    },
  };

  console.log(user.getFullName());


프로퍼티 네임을 표현식으로 나타내는 방법
= 계산된 속성명(computed property name)

  const user = {
    [표현식]: 값;
  };


+) 이렇게 표현식을 대괄호로 감싸주게 되면 표현식의 값을 프로퍼티 네임으로 쓸 수 있음

  const propertyName = 'birth';
  const getJob = () => 'job';

  const codeit = {
    ['topic' + 'Name']: 'Modern Javascript',
    [propertyName]: 2017,
    [getJob()]: '프로그래밍 강사',
  };

  console.log(codeit);

위와 같이 변수에 담긴 값을 사용하거나, 함수의 리턴값을 사용할 수도 있음


#4.9 옵셔널 체이닝

옵셔널 체이닝 연산자 (?.)

: 만약 옵셔널 체이닝 연산자 왼편의 프로퍼티 값이 `undefined` 또는 `null`이 아니라면
  그다음 프로퍼티 값을 리턴하고, 그렇지 않은 경우에는 undefined를 반환하는 문법

  function printCatName(user) {
    console.log(user.cat?.name);
  }


  // 삼항 연산자를 통해 구체적으로 표현하자면
  function printCatName(user) {
    console.log((user.cat === null || user.cat === undefined) ? undefined : user.cat.name);
  }

  // null 병합 연산자와 함께 활용하면
  function printCatName(user) {
    console.log(user.cat?.name ?? '함께 지내는 고양이가 없습니다.');
  }

  const user2 = {
    name: 'Young',
  }

  printCatName(user2); // 함께 지내는 고양이가 없습니다.


#4.10 Destructuring (구조 분해)

Destructuring (구조 분해)
: ES2015에 등장한 문법으로, 배열이나 객체의 구조를 분해하는 문법

- 배열 : 인덱스로 여러 값에 순서가 있는 배열
- 객체 : 프로퍼티 네임으로 여러 값에 이름이 붙는 객체

의 구조가 서로 다르기 때문에 이 Destructuring 문법도
배열과 객체에 각각 적용되는 방식에 차이가 있음


>>배열

  // 멤버들끼리 어떤 게임을 해서 등수가 가려진 rank라는 배열
  // 그러고 나서 이 순위에 따라서 상품을 나눠주려고

  const rank = ['효준', '유나', '민환', '재하'];

  const macbook = rank[0];
  const ipad = rank[1];
  const airpods = rank[2];
  const coupon = rank[3];

  console.log(macbook);
  console.log(ipad);
  console.log(airpods);
  console.log(coupon);

+) 처음부터 상품 이름에 멤버들 이름을 바로 할당할 수도 있지만,

   이렇게 인덱스를 활용하면 도중에 순위가 변동되어 배열 안의 요소들의 순서가 변경되었을 때
   자연스레 배열의 순서에 따라 할당


  // Destructuring 문법으로 다시 작성
  const rank = ['효준', '유나', '민환', '재하'];

  const [macbook, ipad, airpods, coupon] = rank;

  console.log(macbook);
  console.log(ipad);
  console.log(airpods);
  console.log(coupon);

⇒ rank 배열 자체를 할당하면, 배열의 형태를 한 변수 이름들에 요소들이 순서대로 할당되는 원리
   = 배열을 분해해서 하나씩 할당하는 원리


*할당되는 값이 배열의 형식이 아니거나 혹은 아무것도 할당하지 않으면 오류 발생

+) 배열을 가지고 구조 분해를 할 때, 꼭 선언된 변수의 개수와 배열의 길이가 같을 필요는 없음
   = 길이가 넘치는 요소는 어느 변수에도 할당되지 않음


가장 마지막 변수에 마침표 세 개(...)를 붙여주면

  const rank = ['효준', '유나', '민환', '재하'];

  const [macbook, ipad, airpods, ...coupon] = rank;

  console.log(macbook);
  console.log(ipad);
  console.log(airpods);
  console.log(coupon);

  // 출력값
  유나
  효준
  민환
  (2) ["재하", "규식"]

⇒ 함수의 Rest parameter처럼 배열을 분해해서 할당할 때,
   앞쪽에 있는 변수의 순서대로 요소를 할당하고 남은 나머지 요소를 마지막 변수의 배열로 할당하는 게 가능


*하지만 Rest parameter와 마찬가지로 나머지 요소를 가져오기 때문에 항상 마지막 변수에만 활용할 수 있음

+) 할당하는 배열의 길이가 선언된 변수의 개수보다 적으면, 남은 변수에는 선언이 안되거나 오류가 나는 것이 아니라 undefined값이 할당됨


여기서도 함수의 파라미터와 비슷하게 기본값을 작성할 수 있음

  const rank = ['효준', '유나', '민환'];

  const [macbook, ipad, airpods, coupon = '없음'] = rank;

  console.log(macbook);
  console.log(ipad);
  console.log(airpods);
  console.log(coupon);

  // 출력값
  유나
  효준
  민환
  없음

⇒ 이 변수에 undefined값이 할당되려고 할 때, undefined 대신 기본값이 할당됨


배열의 Destructuring 문법은 변수에 할당된 값을 서로 교환할 때도 활용할 수 있음

  let macbook = '효준';
  let ipad = '유나';

  console.log('MacBook 당첨자:', macbook);
  consolg.log('ipad 당첨자:', ipad);


  // Destructuring 문법이 등장하기 전까지는 이렇게 작성됨
  let temp = macbook;
  macbook = ipad;
  ipad = temp;

  console.log('MacBook 당첨자:', macbook);
  consolg.log('ipad 당첨자:', ipad);


  // Destructuring 문법 등장
  [macbook, ipad] = [ipad, macbook];


#4.12 Destructuring (구조 분해) ||

>>객체

프로퍼티 네임으로 여러 값들을 구분

  // 일반적으로 객체의 프로퍼티값을 사용 (점 표기법)
  const macbook = {
    title: '맥북 프로 16형',
    price: 3690000,
    memory: '16GB',
    storage: '1TB SSD 저장 장치',
    display: '16형 Retina 디스플레이',
  };

  const title = macbook.title;
  const price = macbook.price;

  console.log(title);
  console.log(price);


  // 프로퍼티 네임 자체를 변수처럼 사용할 때
  const macbook = {
    title: '맥북 프로 16형',
    price: 3690000,
    memory: '16GB',
    storage: '1TB SSD 저장 장치',
    display: '16형 Retina 디스플레이',
  };

  const { title, price } = macbook;

  console.log(title);
  console.log(price);

⇒ 객체는 프로퍼티 네임을 통해서 분해가 되기 때문에,
   할당 연산자 오른편의 객체에서, 할당 연산자 왼편에 선언된 변수의 이름과 똑같은 프로퍼티 네임이 있으면
   변수 이름에 그 값이 할당되는 방식으로 동작

+) 객체를 보내야 할 때도 객체처럼 중괄호로 변수를 감싸줘야 함


만약에 객체에 존재하지 않는 프로퍼티 네임으로 변수가 선언이 되어 있으면 undefined값이 할당되고, 할당 연산자를 통해서 기본값을 지정해 줄 수도 있음

  const {title, color = 'silver' } = macbook;


마침표 세 개(…)를 통해서 변수를 선언하게 되면

  const { title, ...rest } = macbook;

  console.log(title);
  console.log(rest);

⇒ 남은 프로퍼티들을 하나의 객체로 모아서 변수에 담음


Q : 변수 이름은 항상 프로퍼티 네임과 똑같아야만 하는지
A : 예를 들어 title이라는 프로퍼티를 title이라는 변수로 할당받지 않고, product라는 이름의 변수로 할당받고 싶을 때

  // before
  const { title: product, ...rest } = macbook;

  console.log(title);

  // 출력값
  ReferenceError: title is not defined

  /* 코드 해석
  왜냐하면 위에서 선언한 변수가 title이 아니라 product로 선언되었기 때문에
  title이라는 변수는 찾을 수 없음 */


  // after
  const { title: product, ...rest } = macbook;

  console.log(product);

⇒ 프로퍼티 네임과 다른 새로운 이름의 변수를 선언할 수 있음


이렇게 새로운 이름으로 변수를 선언하는 방식이 꼭 필요한 경우가 있는데,
간혹 객체 내부의 프로퍼티 네임이 변수 이름으로 사용할 수 없는 경우

  const macbook = {
    title: '맥북 프로 16형',
    price: 3690000,
    memory: '16GB',
    storage: '1TB SSD 저장 장치',
    display: '16형 Retina 디스플레이',
    'serial-num': 'ABCDEFGHIJKL',
  };

이렇게 “”를 활용하면 중간에 -이 있어서  변수로는 사용할 수 없는 이름도 프로퍼티 네임으로는 사용할 수 있음

+) 이런 경우에 Destructuring할 때 반드시 새로운 이름으로 변수를 선언해야 한다는 점 참고


대괄호를 통한 computed 프로퍼티 네임 활용

  const { [propertyName]: product } = macbook;

  console.log(product);


∴ javscript로 객체와 배열을 다룰 때 유용하게 활용되기도 하고,
  특히 객체를 활용한 Destructuring은 나중에 리액트라는 라이브러리를 배울 때 적극적으로 사용됨


#4.14 함수와 Destructuring

Destructuring 문법을 함수와 함께 활용

>>배열

1. 함수가 리턴하는 값이 배열일 때, 그 리턴값을 활용

  function getArray() {
    return ['컴퓨터', '냉장고', '세탁기'];
  }

  const [el1, el2, el3] = getArray();

  console.log(el1);
  console.log(el2);
  console.log(el3);

⇒ 배열의 요소들이 하나씩 순서대로 전달됨


2. Rest Parameters가 배열이라는 점을 갖고 Destructuring 문법을 활용

  // before
  function ptintWinners(...arg) {
    const [macbook, ipad, airpods, ...coupon] = arg;

  console.log('이벤트 결과를 알려드립니다!');
  console.log(`맥북의 주인공은 '${macbook}'님 입니다.`);
  console.log(`아이패드의 주인공은 '${ipad}'님 입니다.`);
  console.log(`에어팟 주인공은 '${airpods}'님 입니다.`);
  console.log('코드잇 3개원 수강권 주인공은');

    for (let user of coupon) {
      console.log(`'${coupon}'님`);
    }

  console.log(`이상 총 ${coupon.length}명 입니다.`);
  }

  printWinners('효준', '효신', '재훈', '소원', '현승', '종훈');


  //after
  function ptintWinners([macbook, ipad, airpods, ...coupon]) {

  console.log('이벤트 결과를 알려드립니다!');
  console.log(`맥북의 주인공은 '${macbook}'님 입니다.`);
  console.log(`아이패드의 주인공은 '${ipad}'님 입니다.`);
  console.log(`에어팟 주인공은 '${airpods}'님 입니다.`);
  console.log('코드잇 3개원 수강권 주인공은');

    for (let user of coupon) {
      console.log(`'${coupon}'님`);
    }

  console.log(`이상 총 ${coupon.length}명 입니다.`);
  }

  const ranks = ['효준', '효신', '재훈', '소원', '현승', '종훈'];
  printWinners(ranks);

  /* 코드 해석
  변수를 선언하던 부분이 파라미터로 바뀐 것뿐
  여러 개의 파라미터를 대괄호로 묶어주고 그 배열을 할당 */

⇒ 파라미터 부분에서 Destructuring 문법을 바로 활용하면 배열 하나를 argument로 전달받는 함수로도 구현이 가능


>>객체

1. 함수가 객체를 리턴할 때

  function getObject() {
    return {
      name: '코드잇',
      birth: 2017,
      job: '프로그래밍 강사',
    }
  };

  const { name: brand, birth, job } = getObject();

  console.log(brand);
  console.log(birth);
  console.log(job);


그런데 객체의 경우에는 이렇게 객체를 리턴하는 함수보다는

2. 파라미터를 객체의 형태로 작성한 함수에서 좀 더 유용하게 활용됨

  // before
  const macbook = {
    title: '맥북 프로 16형',
    price: 3690000,
    color: 'silver',
    memory: '16GB',
    storage: '1TB SSD 저장 장치',
    display: '16형 Retina 디스플레이',
  };

  function printSummary(object) {
    console.log(`선택한 상품은 '${object.title}'입니다.`);
    console.log(`색상은 ${object.color}이며,`);
    console.log(`가격은 ${object.price}원 입니다.`);
  };

  printSummary(macbook);


  // after
  const macbook = {
    title: '맥북 프로 16형',
    price: 3690000,
    color: 'silver',
    memory: '16GB',
    storage: '1TB SSD 저장 장치',
    display: '16형 Retina 디스플레이',
  };

  function printSummary(object) {
    const { title, color, price } = oject;

    console.log(`선택한 상품은 '${title}'입니다.`);
    console.log(`색상은 ${color}이며,`);
    console.log(`가격은 ${price}원 입니다.`);
  };

  printSummary(macbook);

⇒ 함수 내부에서 이 프로퍼티를 활용할 때 매번 이 객체에 접근하는 게 아니라, Destructuring 문법을 활용하게 되면 프로퍼티들을 좀 더 간결하게 사용


+) 여기서도 함수 내에서 딱 이 프로퍼티들만 사용할 거라면

  const macbook = {
    title: '맥북 프로 16형',
    price: 3690000,
    color: 'silver',
    memory: '16GB',
    storage: '1TB SSD 저장 장치',
    display: '16형 Retina 디스플레이',
  };

  function printSummary({ title, color, price }) {

    console.log(`선택한 상품은 '${title}'입니다.`);
    console.log(`색상은 ${color}이며,`);
    console.log(`가격은 ${price}원 입니다.`);
  };

  printSummary(macbook);

⇒ 파라미터 부분에서 Destructuring 문법을 활용할 수 있음


이런 점은 특히 HTML의 DOM 이벤트를 다룰 때도 유용하게 활용할 수 있음

  // before
  const btn = document.querySelector('#btn');

  btn.addEventListener('click', (event) => {
    event.target.classList.toggle('checked');
  });


  // after
  const btn = document.querySelector('#btn');

  btn.addEventListener('click', ({ target }) => {
    target.classList.toggle('checked');
  });

⇒ 이벤트 핸들러를 작성할 때 파라미터로 이벤트 객체가 전달되니까
   매번 이벤트 객체에 접근하는 게 아니라, target 프로퍼티만 사용한다면 함수 내부를 작성할 수 있음


+) 참고로 여기 target 프로퍼티도 객체이니 이렇게 중첩된 객체는 :를 가지고 한 번 더 분해할 수 있음

  const btn = document.querySelector('#btn');

  btn.addEventListener('click', ({ target: { classList } }) => {
    classList.toggle('checked');
  });

⇒ 그런데 이 부분은 소괄호 내부가 조금 복잡해지기 때문에 가독성을 해치기도 하고,
   흔한 경우가 아니라서 참고만 해뒀다가 나중에 중첩 객체 구조 분해(Nested Object Destructuring) 심화 학습 권장


+) 중첩된 객체를 분해하지 않아도 함수 내부에서 한번 더 Destructuring 문법을 활용

  const btn = document.querySelector('#btn');

  btn.addEventListener('click', ({ target }) => {
    const { classList } = target;
    classList.toggle('checked');
  });


#4.16 에러와 에러 객체

Javascript는 코드가 실행되는 도중에 에러가 발생하면

- 에러가 발생한 그 순간 프로그램 자체가 멈추고
- 자동으로 그 에러에 대한 정보가 담긴 에러 객체를 생성함
  - 에러 객체의 이름과 조금 더 구체적인 내용이 담긴 메시지


의도치 않게 발생하는 에러

1. 존재하지 않는 변수나 함수를 호출할 때 발생하는 Reference Error
2. 문자열이 담긴 변수를 함수처럼 사용해서 잘못된 방식으로 자료형을 다루려고 하면 Type Error
3. 문법에 맞지 않는 코드를 작성하면 Syntax Error (코드 자체에서 발생하는 부분이 있으면 아예 코드를 실행하기도 전에 에러를 발생시킴)


의도적으로 에러를 만드는 법
: 에러 객체에 이름과 내용이라는 형식을 맞추면 직접 에러 객체를 만들어 낼 수 있음

  const error = new TypeError('타입 에러가 발생했습니다.');

  console.log(error.name);
  console.log(error.message);

  /* 코드 해석
  앞쪽에 new라는 키워드를 붙이고 에러 객체에 이름을 함수처럼 호출해서
  argument로 우리가 원하는 메시지를 전달해주면 새로운 에러 객체를 만들 수 있음 */

⇒ 이건 그냥 에러 객체를 만든 것이지 에러를 발생시킨 건 아니라는 점


(에러 객체를 활용해서) 에러를 직접 발생시키는 법
Javascript에서 의도적으로 에러를 발생시키는 방법은 ⇒ throw 키워드를 사용하는 것

  const error = new TypeError('타입 에러가 발생했습니다.');

  throw error;

  console.log(error.name);
  console.log(error.message);

  /* 코드 해석
  throw 키워드 다음에 에러 객체를 작성해주게 되면
  코드를 실행했을 때 작성한 에러 객체가 에러로 발생하고
  에러가 발생한 시점 이후의 코드는 동작하지 않음 */

∴ Javascript에서 에러가 발생했을 때의 특징과, 직접 에러 객체를 만들어서 에러를 발생시키는 방법


>> Next

에러가 발생했을 때 프로그램이 종료되는 것을 방지하고, 에러를 어떻게 다루는지에 대해


#4.17 try catch문

에러를 다루는 방법 중

1. try catch

  try {
    // 코드
  } catch (error) {
    // 에러가 발생했을 때 동작할 코드
  }

: try와 catch라는 키워드를 사용한 두 개의 코드 블록으로,
먼저 try 블록에서는 동작시킬 코드를 작성하고 이 try 블록 안의 코드가 실행되다가
에러가 발생한다면 그때 동작할 코드를 catch 블록 안에다가 작성하면
에러가 발생했을 때 프로그램이 바로 종료되는 게 아니라 catch문 안에 작성한 코드가 동작


  try {
    console.log('에러 전');

  const codeit = '코드잇';
  console.log(codeit);

  codeit = 'codeit';

  const language = 'Javascript';
  console.log(language);
  } catch (error) {
    console.log('에러 후');
  }

  // 출력값
  에러 전
  코드잇
  에러 후

*try 블록 내에서 에러가 발생한 시점 이후의 코드는 실행되지 않음

+) try문 안에 에러가 없을 경우, catch문 안의 코드는 동작하지 않음


*try문 안에서도 에러가 발생하면 똑같이 에러 객체가 생성되는데 콘솔에 바로 출력되는 게 아니라 error라는 파라미터에 전달됨 (보통 error, err, e라고 씀)

  console.error(e);