
#5.1 배열 메소드 I: forEach와 map

배열의 요소를 하나씩 살펴보면서 반복적인 동작을 할 때 ⇒ for…of문

  const members = ['영훈', '윤수', '동욱', '태호'];

  for (let member of members) {
    console.log(`${member}님이 입장하셨습니다.`);
  }


그런데 배열에는 for…of문처럼 각 요소를 하나씩 살펴보면서 반복적인 동작을 할 수 있는
forEach와 map이라는 배열만의 메소드가 있음


forEach
: forEach메소드는 메소드를 호출할 때, argument로 콜백함수를 작성하면
  콜백함수의 첫 번째 파라미터로 배열의 요소를 순서대로 하나씩 전달하면서
  매번 이 함수를 실행하는 원리로 동작하기 때문에 콜백함수에는 파라미터 하나가 반드시 작성되어야 함
  
  (= for…of문과 비교하면 of 앞에 선언한 변수와 역할이 같다고 보면 됨)

  const members = ['영훈', '윤수', '동욱', '태호'];

  members.forEach(function (member) {
    console.log(`${member}님이 입장하셨습니다.`);
  });


  // 콜백함수를 arrow function으로 수정
  members.forEach((member) => {
    console.log(`${member}님이 입장하셨습니다.`);
  });


  // 요소의 index 관리
  members.forEach((member, i) => {
    console.log(`${i} ${member}님이 입장하셨습니다.`);
  });


+) 콜백함수에서 추가적으로 다룰 수 있는 두 가지 파라미터가 있음

    1. 배열의 요소가 전달되기 때문에 반드시 있어야 하고


    2. 요소의 index를 관리할 수 있음

      index는 다른 배열과 함께 활용할 때 같은 index의 요소를 매칭할 때도 응용할 수 있음

      const firstNames = ['영훈', '윤수', '동욱', '태호'];
      const lastNames = ['강', '이', '손', '성'];

      firstNames.forEach((firstName, i) => {
        console.log(`${lastNames[i]} ${firstName}님이 입장하셨습니다.`);
      });


    3. 반복중인 배열 자체가 전달됨

      const firstNames = ['영훈', '윤수', '동욱', '태호'];
      const lastNames = ['강', '이', '손', '성'];

      firstNames.forEach((firstName, i, arr) => {
        console.log(`${lastNames[i]} ${firstName}님이 입장하셨습니다.`);
        console.log(arr);
      });

      // 출력값
      강영훈님이 입장하셨습니다.
      (4) ['영훈', '윤수', '동욱', '태호']
      ...


      +) 이렇게 변수에 담긴 배열의 경우에는 그냥 변수 이름을 사용하면 되기 때문에
        일반적으로는 잘 사용되지 않는 파라미터이긴 하지만

        const firstNames = ['영훈', '윤수', '동욱', '태호'];
        const lastNames = ['강', '이', '손', '성'];

        ['영훈', '윤수', '동욱', '태호'].forEach((firstName, i, arr) => {
          console.log(`${lastNames[i]} ${firstName}님이 입장하셨습니다.`);
          console.log(arr);
        });

        // 출력값
        강영훈님이 입장하셨습니다.
        (4) ['영훈', '윤수', '동욱', '태호']
        ...

      이렇게 변수에 담지 않고 배열값 자체에 forEach메소드를 활용하는 경우에는
      상황에 따라서 콜백 함수 내에서 이 배열이 필요할 때 활용할 수도 있으니 참고


map
: forEach와 동작하는 방식이 거의 비슷하므로 위 코드의 forEach를 map으로 바꾸고 코드를 실행해도 똑같이 동작함

  const firstNames = ['영훈', '윤수', '동욱', '태호'];
  const lastNames = ['강', '이', '손', '성'];

  ['영훈', '윤수', '동욱', '태호'].map((firstName, i, arr) => {
    console.log(`${lastNames[i]} ${firstName}님이 입장하셨습니다.`);
    console.log(arr);
  });


*한 가지 다른점으로 map은 메소드의 호출 결과로 새로운 배열을 리턴함

  const firstNames = ['영훈', '윤수', '동욱', '태호'];
  const lastNames = ['강', '이', '손', '성'];

  firstNames.map((firstName, i) => {
    return lastNames[i] + firstName;
  });

⇒ map메소드는 이렇게 콜백 함수 내에서 리턴문을 작성하면 각각의 리턴값으로 구성된 새로운 배열이 이 메소드의 결과로 리턴됨


그래서 이 메소드를 호출한 결과를 변수에 담아서 콘솔에 출력하면

  const firstNames = ['영훈', '윤수', '동욱', '태호'];
  const lastNames = ['강', '이', '손', '성'];

  const fullNames = firstNames.map((firstName, i) => {
    return lastNames[i] + firstName;
  });

  console.log(fullNames);

  // 출력값
  (4) ["강영훈", "이윤수", "손동욱", "성태호"]


  /* 코드 해석
  map메소드를 호출할 때 작성한 콜백함수의 리턴값들로 구성된 배열이 출력됨 */


이 부분을 arrow function의 문법을 활용해서 작성하면 좀 더 간결하게 작성할 수 있음

  const fullNames = firstNames.map((firstName, i) => lastNames[i] + firstName);

  console.log(fullNames);


*참고로 forEach메소드는 리턴값이 없기 때문에 변수에 담았을 땐 항상 undefined값을 갖게 됨
 
 그래서 단순히 배열의 반복작업이 필요한 경우에는 forEach를,
 반복작업을 통해서 새로운 배열이 필요한 경우에는 map메소드를 활용


+) 이 두 메소드의 최대 반복 횟수는 메소드를 처음 호출할 때 그 당시 요소의 개수라는 점

  // 콜백 함수 내부에서 반복중인 배열을 편집할 수 있음

  const members = ['영훈', '윤수', '동욱', '태호'];

  members.forEach((member) => {
    console.log(`${member}님이 입장하셨습니다.`);
    members.push('코드잇');
  });

  console.log(members);

  // 출력값
  (8) ["영훈", "윤수", "동욱", "태호", "코드잇", "코드잇", "코드잇", "코드잇"]

  /* 코드 해석
  매번 반복할 때마다 배열의 새로운 요소를 추가하게 되면
  무한 루프에 빠질 거라고 예상할 수도 있지만, 실제로 코드를 실행하면 딱 네 번만 동작함 */


하지만 반복중에 배열의 길이가 줄어드는 경우에는 반복 횟수도 함께 줄어듬

  const members = ['영훈', '윤수', '동욱', '태호'];

  members.forEach((member) => {
    console.log(`${member}님이 입장하셨습니다.`);
    members.pop();
  });

  console.log(members);

  // 출력값
  영훈님이 입장하셨습니다.
  윤수님이 입장하셨습니다.
  (2) ["영훈", "윤수"]